{"version":3,"sources":["components/Countries.jsx","components/Pagination.jsx","App.js","index.js"],"names":["Country","name","population","region","flag","showModal","show","hideModal","alpha2Code","capital","area","nativeName","cioc","subregion","src","alt","width","height","Pagination","perPage","totalPosts","Paginate","changePage","currentPage","pageNumbers","i","Math","ceil","push","active","number","disabled","num","className","onClick","href","map","key","App","useState","countries","setCountries","search","setSearch","query","setQuery","state","setState","setCurrentPage","useEffect","getCountry","a","fetch","json","response","console","log","status","data","indexOfLastCountry","indexOfFirstCountry","currentCountries","slice","Fragment","onSubmit","e","preventDefault","type","value","onChange","target","country","length","pageNumber","val","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2ef99e0e.chunk.js","sourcesContent":["import React from \"react\";\n// import Modal from \"./Modal\";\n\nconst Country = ({\n  name,\n  population,\n  region,\n  flag,\n  showModal,\n  show,\n  hideModal,\n  alpha2Code,\n  capital,\n  area,\n  nativeName,\n  cioc,\n  subregion,\n}) => {\n  return (\n    <div>\n      <img src={flag} alt=\"\" width=\"100px\" height=\"auto\"></img>\n      <h1>{name}</h1>\n      <p>{population}</p>\n      <p>{region}</p>\n      {/* <button\n        type=\"button\"\n        onClick={(e) => {\n          e.preventDefault();\n          showModal();\n        }}\n      >\n        Know More\n      </button> */}\n    </div>\n  );\n};\n\nexport default Country;\n","import React from \"react\";\n\nconst Pagination = ({\n  perPage,\n  totalPosts,\n  Paginate,\n  changePage,\n  currentPage,\n}) => {\n  const pageNumbers = [];\n  for (let i = 1; i <= Math.ceil(totalPosts / perPage); i++) {\n    pageNumbers.push(i);\n  }\n  const active = (number) => {\n    if (number === currentPage) return \"active\";\n  };\n  const disabled = (num) => {\n    if (currentPage === 1 && num === 0) return \"disabled\";\n    else if (currentPage === Math.ceil(totalPosts / perPage) && num === 1)\n      return \"disabled\";\n  };\n  return (\n    <div className=\"pagination\">\n      <li>\n        <a className={disabled(0)} onClick={() => changePage(0)} href=\"!#\">\n          Prev\n        </a>\n      </li>\n      {pageNumbers.map((number) => (\n        <li key={number}>\n          <a\n            className={active(number)}\n            onClick={() => Paginate(number)}\n            href=\"!#\"\n          >\n            {number}\n          </a>\n        </li>\n      ))}\n      <li>\n        <a className={disabled(1)} onClick={() => changePage(1)} href=\"!#\">\n          Next\n        </a>\n      </li>\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React, { useEffect, useState } from \"react\";\nimport \"./styles/style.css\";\nimport Country from \"./components/Countries\";\n// import Modal from \"./components/Modal\";\nimport Pagination from \"./components/Pagination\";\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [search, setSearch] = useState(\"\");\n  const [query, setQuery] = useState(\"\");\n  const [state, setState] = useState(false);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [perPage] = useState(9);\n\n  useEffect(() => {\n    getCountry();\n    setCurrentPage(1);\n  }, [query]);\n\n  //Methods for Modal display\n  const showModal = () => {\n    setState(true);\n  };\n  const hideModal = () => {\n    setState(false);\n  };\n  //Get REST API\n  const getCountry = async () => {\n    let response;\n    try {\n      if (query === \"\") {\n        response = await (\n          await fetch(\"https://restcountries.eu/rest/v2/all\")\n        ).json();\n        console.log(response);\n      } else {\n        response = await (\n          await fetch(\"https://restcountries.eu/rest/v2/name/\" + query)\n        ).json();\n        console.log(response);\n        if (response.status === 404) {\n          console.log(\"in if\");\n          response = await (\n            await fetch(\" https://restcountries.eu/rest/v2/capital/\" + query)\n          ).json();\n          console.log(response);\n          if (response.status === 404) {\n            console.log(\"in if\");\n            response = await (\n              await fetch(\" https://restcountries.eu/rest/v2/lang/\" + query)\n            ).json();\n            console.log(response);\n          }\n\n          if (response.status === 404) {\n            console.log(\"in if\");\n            response = await (\n              await fetch(\n                \" https://restcountries.eu/rest/v2/callingcode/\" + query\n              )\n            ).json();\n            console.log(response);\n          }\n\n          if (response.status === 404) {\n            console.log(\"in if\");\n            response = await (\n              await fetch(\" https://restcountries.eu/rest/v2/region/\" + query)\n            ).json();\n            console.log(response);\n          }\n        }\n      }\n      const data = await response;\n      setCountries(data);\n    } catch (error) {\n      console.log(error);\n      setCountries([{ name: \"Page not found\" }]);\n    }\n  };\n  const updateState = (e) => {\n    setSearch(e.target.value);\n  };\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n  };\n\n  //Pagination req.\n\n  // Pagination variables\n  const indexOfLastCountry = currentPage * perPage;\n  const indexOfFirstCountry = indexOfLastCountry - perPage;\n  const currentCountries = countries.slice(\n    indexOfFirstCountry,\n    indexOfLastCountry\n  );\n  //Pagination method\n  const Paginate = (pageNumber) => {\n    setCurrentPage(pageNumber);\n  };\n  const changePage = (val) => {\n    if (val === 0) {\n      setCurrentPage(currentPage - 1);\n    } else if (val === 1) {\n      setCurrentPage(currentPage + 1);\n    }\n  };\n  return (\n    <React.Fragment>\n      <nav>\n        <form onSubmit={getSearch}>\n          <input type=\"search\" value={search} onChange={updateState} />\n          <button type=\"submit\">Search</button>\n        </form>\n      </nav>\n      <div className=\"container\">\n        <div className=\"grid\">\n          {currentCountries.map((country) => (\n            <Country\n              showModal={showModal}\n              key={country.alpha2Code}\n              name={country.name}\n              population={country.population}\n              region={country.region}\n              flag={country.flag}\n              show={state}\n              hideModal={hideModal}\n              alpha2Code={country.alpha2Code}\n              capital={country.capital}\n              area={country.area}\n              nativeName={country.nativeName}\n              cioc={country.cioc}\n              subregion={country.subregion}\n            />\n          ))}\n        </div>\n      </div>\n      <div className=\"page-container\">\n        <Pagination\n          perPage={perPage}\n          totalPosts={countries.length}\n          currentPage={currentPage}\n          Paginate={Paginate}\n          changePage={changePage}\n        />\n      </div>\n      {/* {countries.map((country) => (\n        <Modal\n          show={state}\n          hideModal={hideModal}\n          key={country.alpha2Code}\n          alpha2Code={country.alpha2Code}\n          capital={country.capital}\n          area={country.area}\n          nativeName={country.nativeName}\n          cioc={country.cioc}\n          subregion={country.subregion}\n        />\n      ))} */}\n    </React.Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}